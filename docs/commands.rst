Commands
========

The Makefile contains the central entry points for common tasks related to this project.


Updating the environment requirements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Running the programm from the beginning
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Here is the order I followed to write the code, respecting the parent/dependency relationships. That's the order to follow to run the all programm. I've written in Italic (between '*'), the modules that are not executed in __main__.ipynb as they are imported and used inside other modules.

Initialisation and data import
   - *data.constant_variables*
   - data.make_dataset
   - *useful_functions.py*

Data cleaning
   - visualization.visualize

Creation of new features
   - initialize_new_features_columns
   - make_new_features


Creating documentation with SPhinx
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The documentation you are reading has been generated by Sphinx, a Python module/package. The Sphinx documentation generation controls are located in the 'docs' directory of the project, and this directory is exclusively reserved for this purpose.

I primarily used the Sphinx documentation to provide a clear and standardized description of my code. The secondary use is to describe the project globally, providing information on how we use it and how it is organized.


* How to update/generate Sphinx documentation without changing its settings?
    Very simple, in the terminal, opened in the 'env-projet-mbappe' virtual, go to Projet Mbappe Cookiestructure/docs> location and type and execute: 'make clean' (to make sure that there is no old documentation in the stocking directory, which is often the case) \
    Then type and execute: 'make html'
    All the documentation is beeing created in _build/html. To open it you need to open the 'index' file located in _build/html, in your file explorer.


* How to write documentation for the code?
    In each module the comments written under the format "abcd" (and not #), are added to Sphinx documentation. Indeed, the autodoc module allowed to directly add the docstrings in our code to the documentation. There are two main categories of documentation for our code:
    
    -Functions documentation. To write the documentation of functions there is a standardised format: The Google and Numpy styles docstrings. Here is a description of both format: https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html . I use Google format so far. 
    
    -Documentation outsite functions. We are used to write description of every module, writing a descritption of its actions and use, at the top of the code. See in other modules how it's made. We can also write comments between functions to describe specific actions, but I have no process for that.


* How to set up documentation for a module that we have je created?
    When we create a new module we need to do a few manipulations to include it in the documentation. Here are the steps to follow to activate the documentation on this module:
    
    - 1. Create a new .rst file into docs/modules_rst that you name: 'module_name.rst'. In this .rst file write the following text, replacing module_path by the path towards your module from src directory. For instance: module_path = visualization.visualize, so you replace module_path by this and obtain src.visualization.visualize.
    
    .. code-block:: rst

      src.module_path
      =========================
       .. automodule:: src.module_path
          :members:
          :undoc-members:
          :show-inheritance:
    
    
    - 2. The modules_rst folder is organised with a structure that is a copy of the Projet_Mbappe_Cookiestructure/src directory structure. I have recreated the same directories and store the .rst files of each module in its appropriated directory. 
    
        - If you find the right directory to place your module_name.rst file in this arborescence: place it there. Then add your module_name into the toctree (under other modules names) of the index.rst file located at the same hierarchic rank as your module_name.rst file.
    
        - If you don't find the right directory to place your module_name.rst file in this arborescence: The directory that must contains your module_name.rst file is not created already, so create it. In that new directory create an 'index.rst file' that you will copy and paste from another directory. Inside this pasted index.rst file you just have to replace the directory name by the name of the new one you're creating, and replace the content of the toctree by your module_name. (See other .rst files and index.rst files to understand how it works if you don't understand). Finally add to the toctree of modules_rst/index.rst, the location of the new index.rst file you've just created for your directory. It is: 'directory_name/index.rst'.
    
    

    When these two steps are completed you can write docstrings in this module, respecting the rules defined in the point above.